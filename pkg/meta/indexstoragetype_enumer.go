// Code generated by "enumer -type=IndexStorageType -json -trimprefix=IndexStorage -transform=lower"; DO NOT EDIT.

package meta

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _IndexStorageTypeName = "unknowns3miniodisk"

var _IndexStorageTypeIndex = [...]uint8{0, 7, 9, 14, 18}

const _IndexStorageTypeLowerName = "unknowns3miniodisk"

func (i IndexStorageType) String() string {
	if i >= IndexStorageType(len(_IndexStorageTypeIndex)-1) {
		return fmt.Sprintf("IndexStorageType(%d)", i)
	}
	return _IndexStorageTypeName[_IndexStorageTypeIndex[i]:_IndexStorageTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IndexStorageTypeNoOp() {
	var x [1]struct{}
	_ = x[IndexStorageUnknown-(0)]
	_ = x[IndexStorageS3-(1)]
	_ = x[IndexStorageMinIO-(2)]
	_ = x[IndexStorageDisk-(3)]
}

var _IndexStorageTypeValues = []IndexStorageType{IndexStorageUnknown, IndexStorageS3, IndexStorageMinIO, IndexStorageDisk}

var _IndexStorageTypeNameToValueMap = map[string]IndexStorageType{
	_IndexStorageTypeName[0:7]:        IndexStorageUnknown,
	_IndexStorageTypeLowerName[0:7]:   IndexStorageUnknown,
	_IndexStorageTypeName[7:9]:        IndexStorageS3,
	_IndexStorageTypeLowerName[7:9]:   IndexStorageS3,
	_IndexStorageTypeName[9:14]:       IndexStorageMinIO,
	_IndexStorageTypeLowerName[9:14]:  IndexStorageMinIO,
	_IndexStorageTypeName[14:18]:      IndexStorageDisk,
	_IndexStorageTypeLowerName[14:18]: IndexStorageDisk,
}

var _IndexStorageTypeNames = []string{
	_IndexStorageTypeName[0:7],
	_IndexStorageTypeName[7:9],
	_IndexStorageTypeName[9:14],
	_IndexStorageTypeName[14:18],
}

// IndexStorageTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IndexStorageTypeString(s string) (IndexStorageType, error) {
	if val, ok := _IndexStorageTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IndexStorageTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IndexStorageType values", s)
}

// IndexStorageTypeValues returns all values of the enum
func IndexStorageTypeValues() []IndexStorageType {
	return _IndexStorageTypeValues
}

// IndexStorageTypeStrings returns a slice of all String values of the enum
func IndexStorageTypeStrings() []string {
	strs := make([]string, len(_IndexStorageTypeNames))
	copy(strs, _IndexStorageTypeNames)
	return strs
}

// IsAIndexStorageType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IndexStorageType) IsAIndexStorageType() bool {
	for _, v := range _IndexStorageTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IndexStorageType
func (i IndexStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IndexStorageType
func (i *IndexStorageType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IndexStorageType should be a string, got %s", data)
	}

	var err error
	*i, err = IndexStorageTypeString(s)
	return err
}
