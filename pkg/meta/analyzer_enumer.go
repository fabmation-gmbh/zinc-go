// Code generated by "enumer -type=Analyzer -json -trimprefix=Analyzer -transform=lower"; DO NOT EDIT.

package meta

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AnalyzerName = "unsetstandardsimplekeywordwebregexpstopwhitespace"

var _AnalyzerIndex = [...]uint8{0, 5, 13, 19, 26, 29, 35, 39, 49}

const _AnalyzerLowerName = "unsetstandardsimplekeywordwebregexpstopwhitespace"

func (i Analyzer) String() string {
	if i < 0 || i >= Analyzer(len(_AnalyzerIndex)-1) {
		return fmt.Sprintf("Analyzer(%d)", i)
	}
	return _AnalyzerName[_AnalyzerIndex[i]:_AnalyzerIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnalyzerNoOp() {
	var x [1]struct{}
	_ = x[AnalyzerUnset-(0)]
	_ = x[AnalyzerStandard-(1)]
	_ = x[AnalyzerSimple-(2)]
	_ = x[AnalyzerKeyword-(3)]
	_ = x[AnalyzerWeb-(4)]
	_ = x[AnalyzerRegexp-(5)]
	_ = x[AnalyzerStop-(6)]
	_ = x[AnalyzerWhitespace-(7)]
}

var _AnalyzerValues = []Analyzer{AnalyzerUnset, AnalyzerStandard, AnalyzerSimple, AnalyzerKeyword, AnalyzerWeb, AnalyzerRegexp, AnalyzerStop, AnalyzerWhitespace}

var _AnalyzerNameToValueMap = map[string]Analyzer{
	_AnalyzerName[0:5]:        AnalyzerUnset,
	_AnalyzerLowerName[0:5]:   AnalyzerUnset,
	_AnalyzerName[5:13]:       AnalyzerStandard,
	_AnalyzerLowerName[5:13]:  AnalyzerStandard,
	_AnalyzerName[13:19]:      AnalyzerSimple,
	_AnalyzerLowerName[13:19]: AnalyzerSimple,
	_AnalyzerName[19:26]:      AnalyzerKeyword,
	_AnalyzerLowerName[19:26]: AnalyzerKeyword,
	_AnalyzerName[26:29]:      AnalyzerWeb,
	_AnalyzerLowerName[26:29]: AnalyzerWeb,
	_AnalyzerName[29:35]:      AnalyzerRegexp,
	_AnalyzerLowerName[29:35]: AnalyzerRegexp,
	_AnalyzerName[35:39]:      AnalyzerStop,
	_AnalyzerLowerName[35:39]: AnalyzerStop,
	_AnalyzerName[39:49]:      AnalyzerWhitespace,
	_AnalyzerLowerName[39:49]: AnalyzerWhitespace,
}

var _AnalyzerNames = []string{
	_AnalyzerName[0:5],
	_AnalyzerName[5:13],
	_AnalyzerName[13:19],
	_AnalyzerName[19:26],
	_AnalyzerName[26:29],
	_AnalyzerName[29:35],
	_AnalyzerName[35:39],
	_AnalyzerName[39:49],
}

// AnalyzerString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnalyzerString(s string) (Analyzer, error) {
	if val, ok := _AnalyzerNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnalyzerNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Analyzer values", s)
}

// AnalyzerValues returns all values of the enum
func AnalyzerValues() []Analyzer {
	return _AnalyzerValues
}

// AnalyzerStrings returns a slice of all String values of the enum
func AnalyzerStrings() []string {
	strs := make([]string, len(_AnalyzerNames))
	copy(strs, _AnalyzerNames)
	return strs
}

// IsAAnalyzer returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Analyzer) IsAAnalyzer() bool {
	for _, v := range _AnalyzerValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Analyzer
func (i Analyzer) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Analyzer
func (i *Analyzer) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Analyzer should be a string, got %s", data)
	}

	var err error
	*i, err = AnalyzerString(s)
	return err
}
