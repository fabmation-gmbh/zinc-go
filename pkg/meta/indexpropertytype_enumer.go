// Code generated by "enumer -type=IndexPropertyType -json -trimprefix=IdxProperty -transform=lower"; DO NOT EDIT.

package meta

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _IndexPropertyTypeName = "unknowntextkeyworddatenumericboolean"

var _IndexPropertyTypeIndex = [...]uint8{0, 7, 11, 18, 22, 29, 36}

const _IndexPropertyTypeLowerName = "unknowntextkeyworddatenumericboolean"

func (i IndexPropertyType) String() string {
	if i < 0 || i >= IndexPropertyType(len(_IndexPropertyTypeIndex)-1) {
		return fmt.Sprintf("IndexPropertyType(%d)", i)
	}
	return _IndexPropertyTypeName[_IndexPropertyTypeIndex[i]:_IndexPropertyTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IndexPropertyTypeNoOp() {
	var x [1]struct{}
	_ = x[IdxPropertyUnknown-(0)]
	_ = x[IdxPropertyText-(1)]
	_ = x[IdxPropertyKeyword-(2)]
	_ = x[IdxPropertyDate-(3)]
	_ = x[IdxPropertyNumeric-(4)]
	_ = x[IdxPropertyBoolean-(5)]
}

var _IndexPropertyTypeValues = []IndexPropertyType{IdxPropertyUnknown, IdxPropertyText, IdxPropertyKeyword, IdxPropertyDate, IdxPropertyNumeric, IdxPropertyBoolean}

var _IndexPropertyTypeNameToValueMap = map[string]IndexPropertyType{
	_IndexPropertyTypeName[0:7]:        IdxPropertyUnknown,
	_IndexPropertyTypeLowerName[0:7]:   IdxPropertyUnknown,
	_IndexPropertyTypeName[7:11]:       IdxPropertyText,
	_IndexPropertyTypeLowerName[7:11]:  IdxPropertyText,
	_IndexPropertyTypeName[11:18]:      IdxPropertyKeyword,
	_IndexPropertyTypeLowerName[11:18]: IdxPropertyKeyword,
	_IndexPropertyTypeName[18:22]:      IdxPropertyDate,
	_IndexPropertyTypeLowerName[18:22]: IdxPropertyDate,
	_IndexPropertyTypeName[22:29]:      IdxPropertyNumeric,
	_IndexPropertyTypeLowerName[22:29]: IdxPropertyNumeric,
	_IndexPropertyTypeName[29:36]:      IdxPropertyBoolean,
	_IndexPropertyTypeLowerName[29:36]: IdxPropertyBoolean,
}

var _IndexPropertyTypeNames = []string{
	_IndexPropertyTypeName[0:7],
	_IndexPropertyTypeName[7:11],
	_IndexPropertyTypeName[11:18],
	_IndexPropertyTypeName[18:22],
	_IndexPropertyTypeName[22:29],
	_IndexPropertyTypeName[29:36],
}

// IndexPropertyTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IndexPropertyTypeString(s string) (IndexPropertyType, error) {
	if val, ok := _IndexPropertyTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IndexPropertyTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IndexPropertyType values", s)
}

// IndexPropertyTypeValues returns all values of the enum
func IndexPropertyTypeValues() []IndexPropertyType {
	return _IndexPropertyTypeValues
}

// IndexPropertyTypeStrings returns a slice of all String values of the enum
func IndexPropertyTypeStrings() []string {
	strs := make([]string, len(_IndexPropertyTypeNames))
	copy(strs, _IndexPropertyTypeNames)
	return strs
}

// IsAIndexPropertyType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IndexPropertyType) IsAIndexPropertyType() bool {
	for _, v := range _IndexPropertyTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for IndexPropertyType
func (i IndexPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for IndexPropertyType
func (i *IndexPropertyType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("IndexPropertyType should be a string, got %s", data)
	}

	var err error
	*i, err = IndexPropertyTypeString(s)
	return err
}
